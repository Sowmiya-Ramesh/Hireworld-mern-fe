{"ast":null,"code":"import React,{useEffect}from'react';import{connect}from'react-redux';import{getGithubRepos}from'../../actions/profile';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ProfileGithub=function ProfileGithub(_ref){var username=_ref.username,getGithubRepos=_ref.getGithubRepos,repos=_ref.repos;useEffect(function(){getGithubRepos(username);},[getGithubRepos,username]);return/*#__PURE__*/_jsxs(\"div\",{className:\"profile-github\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-primary my-1\",children:\"Github Repos\"}),repos.map(function(repo){return/*#__PURE__*/_jsxs(\"div\",{className:\"repo bg-white p-1 my-1\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h4\",{children:/*#__PURE__*/_jsx(\"a\",{href:repo.html_url,target:\"_blank\",rel:\"noopener noreferrer\",children:repo.name})}),/*#__PURE__*/_jsx(\"p\",{children:repo.description})]}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsxs(\"li\",{className:\"badge badge-primary\",children:[\"Stars: \",repo.stargazers_count]}),/*#__PURE__*/_jsxs(\"li\",{className:\"badge badge-dark\",children:[\"Watchers: \",repo.watchers_count]}),/*#__PURE__*/_jsxs(\"li\",{className:\"badge badge-light\",children:[\"Forks: \",repo.forks_count]})]})})]},repo.id);})]});};var mapStateToProps=function mapStateToProps(state){return{repos:state.profile.repos};};export default connect(mapStateToProps,{getGithubRepos:getGithubRepos})(ProfileGithub);","map":{"version":3,"sources":["C:/Users/Sowmiya RV/Desktop/Hire_World - Copy/client/src/components/profile/ProfileGithub.js"],"names":["React","useEffect","connect","getGithubRepos","ProfileGithub","username","repos","map","repo","html_url","name","description","stargazers_count","watchers_count","forks_count","id","mapStateToProps","state","profile"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CAEA,OAASC,OAAT,KAAwB,aAAxB,CACA,OAASC,cAAT,KAA+B,uBAA/B,C,wFAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,MAAyC,IAAtCC,CAAAA,QAAsC,MAAtCA,QAAsC,CAA5BF,cAA4B,MAA5BA,cAA4B,CAAZG,KAAY,MAAZA,KAAY,CAC7DL,SAAS,CAAC,UAAM,CACdE,cAAc,CAACE,QAAD,CAAd,CACD,CAFQ,CAEN,CAACF,cAAD,CAAiBE,QAAjB,CAFM,CAAT,CAIA,mBACE,aAAK,SAAS,CAAC,gBAAf,wBACE,WAAI,SAAS,CAAC,mBAAd,0BADF,CAEGC,KAAK,CAACC,GAAN,CAAU,SAAAC,IAAI,qBACb,aAAmB,SAAS,CAAC,wBAA7B,wBACE,oCACE,iCACE,UAAG,IAAI,CAAEA,IAAI,CAACC,QAAd,CAAwB,MAAM,CAAC,QAA/B,CAAwC,GAAG,CAAC,qBAA5C,UACGD,IAAI,CAACE,IADR,EADF,EADF,cAME,mBAAIF,IAAI,CAACG,WAAT,EANF,GADF,cASE,kCACE,mCACE,YAAI,SAAS,CAAC,qBAAd,qBACUH,IAAI,CAACI,gBADf,GADF,cAIE,YAAI,SAAS,CAAC,kBAAd,wBACaJ,IAAI,CAACK,cADlB,GAJF,cAOE,YAAI,SAAS,CAAC,mBAAd,qBAA0CL,IAAI,CAACM,WAA/C,GAPF,GADF,EATF,GAAUN,IAAI,CAACO,EAAf,CADa,EAAd,CAFH,GADF,CA4BD,CAjCD,CAyCA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAAAC,KAAK,QAAK,CAChCX,KAAK,CAAEW,KAAK,CAACC,OAAN,CAAcZ,KADW,CAAL,EAA7B,CAIA,cAAeJ,CAAAA,OAAO,CAACc,eAAD,CAAkB,CAAEb,cAAc,CAAdA,cAAF,CAAlB,CAAP,CAA6CC,aAA7C,CAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { getGithubRepos } from '../../actions/profile';\r\n\r\nconst ProfileGithub = ({ username, getGithubRepos, repos }) => {\r\n  useEffect(() => {\r\n    getGithubRepos(username);\r\n  }, [getGithubRepos, username]);\r\n\r\n  return (\r\n    <div className=\"profile-github\">\r\n      <h2 className=\"text-primary my-1\">Github Repos</h2>\r\n      {repos.map(repo => (\r\n        <div key={repo.id} className=\"repo bg-white p-1 my-1\">\r\n          <div>\r\n            <h4>\r\n              <a href={repo.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                {repo.name}\r\n              </a>\r\n            </h4>\r\n            <p>{repo.description}</p>\r\n          </div>\r\n          <div>\r\n            <ul>\r\n              <li className=\"badge badge-primary\">\r\n                Stars: {repo.stargazers_count}\r\n              </li>\r\n              <li className=\"badge badge-dark\">\r\n                Watchers: {repo.watchers_count}\r\n              </li>\r\n              <li className=\"badge badge-light\">Forks: {repo.forks_count}</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nProfileGithub.propTypes = {\r\n  getGithubRepos: PropTypes.func.isRequired,\r\n  repos: PropTypes.array.isRequired,\r\n  username: PropTypes.string.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  repos: state.profile.repos\r\n});\r\n\r\nexport default connect(mapStateToProps, { getGithubRepos })(ProfileGithub);\r\n"]},"metadata":{},"sourceType":"module"}